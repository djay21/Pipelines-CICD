version: 2.1
description: Detect bugs and vulnerabilities

references:
  workspace_root: &workspace_root
    /tmp/workspace
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

orbs:
  sonarcloud: sonarsource/sonarcloud@1.0.3
  aws-cli: circleci/aws-cli@3.1.4

jobs:
  sonar_scan_full:
    description: Run sonarcloud scan
    docker:
      - image: node:latest
    resource_class: xlarge
    steps:
      - *attach_workspace
      - checkout
      - run:
          name: "Setup sonar-project.propertie"
          command: |
            echo -e "sonar.projectKey=$SONAR_PROJECT_KEY\n\
            sonar.organization=$SONAR_ORGANIZATION\n\
            sonar.host.url=$SONAR_URL\n\
            sonar.exclusions= */.java" > sonar-project.properties
      - setup_remote_docker:
          docker_layer_caching: True
      - sonarcloud/scan
      - run:
          name: "Generate sonar-cloud json report"
          command: |
            wget -O sonar_scan_${CIRCLE_PROJECT_REPONAME}.json \
            "https://sonarcloud.io/api/issues/search?componentKeys=${SONAR_PROJECT_KEY}&branch=${CIRCLE_BRANCH}&resolved=false&facets=severities"
            cp sonar_scan_${CIRCLE_PROJECT_REPONAME}.json /tmp/workspace/
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - "*.json"

  jfrog_scan:
    description: Run JFrog scan
    docker:
      - image: node:latest
    resource_class: xlarge
    steps:
      - *attach_workspace
      - checkout
      - run:
          name: Install JFrog CLI
          command: |
            npm install -g jfrog-cli-v2-jf && jf intro
      - run:
          name: Build package
          command: |
            apt-get update -y
            apt-get upgrade -y
            apt-get install maven -y 
            mvn clean package
      - run:
          name: JFROG scan...
          command: |
            jf c add --user $JFROG_USER --password $JFROG_PASSWORD --url $JFROG_URL
            jf s ./ --format=table > jfrog_${CIRCLE_PROJECT_REPONAME}.txt
            cp jfrog_${CIRCLE_PROJECT_REPONAME}.txt /tmp/workspace/jfrog_${CIRCLE_PROJECT_REPONAME}.txt
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - "*.txt"

  Run-tests:
    machine:
      image: ubuntu-2204:2022.10.2
    resource_class: xlarge
    parameters:
      TEST_FILE:
        description: "Testing file"
        type: string
        default: ""
    steps:
        - *attach_workspace
        - checkout
        - run:
            name: Install SSL pkgs
            command: |
              export DEBIAN_FRONTEND=noninteractive 
              sudo apt update
              sudo apt upgrade --yes
              echo "Get repo keys for forti and google..."
              sudo wget -O - https://repo.fortinet.com/repo/6.4/ubuntu/DEB-GPG-KEY | sudo apt-key add -
              sudo wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
              echo "Edit source list to install forticlient and chrome..."
              echo "deb [arch=amd64] https://repo.fortinet.com/repo/6.4/ubuntu/ /bionic multiverse" | sudo tee -a /etc/apt/sources.list
              sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google.list'
              sudo apt-get update
              echo "Install maven, expect and google pkgs..."
              sudo apt-get install maven -y
              sudo apt install expect -y
              sudo apt install google-chrome-stable -y
        - run: 
            name: Run tests
            no_output_timeout: 300m
            command: |
              echo "Running tests..."
              echo << parameters.TEST_FILE >>
              mvn clean test -U -Pselenium-tests -Dsuite.name=<< parameters.TEST_FILE >>
              cp target/surefire-reports/emailable-report.html /tmp/workspace/emailable-report.html  
        - persist_to_workspace:
            root: *workspace_root
            paths:
              - emailable-report.html

  send-email-report-scan:
    executor: aws-cli/default
    steps:
      - *attach_workspace
      - aws-cli/setup
      - run:
          command: |
            cd /tmp/workspace
            zip ${CIRCLE_PROJECT_REPONAME}scan-report.zip jfrog${CIRCLE_PROJECT_REPONAME}.txt sonar_scan_${CIRCLE_PROJECT_REPONAME}.json
            echo '{"Data": "From: circleci@abc.com\nTo: def@abc.com, def@def.com\nSubject: Daily test report\nMIME-Version: 1.0\nContent-type: Multipart/Mixed; boundary=\"NextPart\"\n\n--NextPart\nContent-Type: text/plain\n\nThis is generated by circleci, attached daily qa-automation test results\n\n--NextPart\nContent-Type: text/html;\nContent-Disposition: attachment; filename=emailable-report.html\nContent-Transfer-Encoding: base64;\n\n'$(base64 ./emailable-report.html)'\n--NextPart--"}' > message.json
            aws ses send-raw-email --cli-binary-format raw-in-base64-out --raw-message file://message.json

  send-email-report:
    executor: aws-cli/default
    steps:
      - *attach_workspace
      - aws-cli/setup
      - run:
          command: |
            cd /tmp/workspace
            echo '{"Data": "From: circleci@abc.com\nTo: def@abc.com, def@def.com\nSubject: Daily test report\nMIME-Version: 1.0\nContent-type: Multipart/Mixed; boundary=\"NextPart\"\n\n--NextPart\nContent-Type: text/plain\n\nThis is generated by circleci, attached daily qa-automation test results\n\n--NextPart\nContent-Type: text/html;\nContent-Disposition: attachment; filename=emailable-report.html\nContent-Transfer-Encoding: base64;\n\n'$(base64 ./emailable-report.html)'\n--NextPart--"}' > message.json
            aws ses send-raw-email --cli-binary-format raw-in-base64-out --raw-message file://message.json


workflows:
  version: 2
  qa-automation-workflow-12am:
    jobs:
      parameters:
        TEST_FILE:
          description: "Testing file"
          type: string
          default: "testing.xml"
      - jfrog_scan
      - sonar_scan_full:
          context: qa_automation_sonar_cloud
      - send-email-report-scan:
          requires:
            - sonar_scan_full
            - jfrog_scan
      - Run-tests:
          TEST_FILE: "testing.xml"
      - send-email-report:
          requires:
            - Run-tests
    triggers: 
      - schedule:
          cron: "0 5 * * *"
          filters:
            branches:
              only:
                - << pipeline.git.branch >>
  qa-automation-workflow-2am:
    jobs:
      - jfrog_scan
      - sonar_scan_full:
          context: qa_automation_sonar_cloud
      - send-email-report-scan:
          requires:
            - sonar_scan_full
            - jfrog_scan
      - Run-tests:
          TEST_FILE: "testing2.xml"
      - send-email-report:
          requires:
            - Run-tests
    triggers: 
      - schedule:
          cron: "0 7 * * *"
          filters:
            branches:
              only:
                - << pipeline.git.branch >>
  qa-automation-workflow-4am:
    jobs:
      - jfrog_scan
      - sonar_scan_full:
          context: qa_automation_sonar_cloud
      - send-email-report-scan:
          requires:
            - sonar_scan_full
            - jfrog_scan
      - Run-tests:
          TEST_FILE: "testing3.xml"
      - send-email-report:
          requires:
            - Run-tests
    triggers: 
      - schedule:
          cron: "0 9 * * *"
          filters:
            branches:
              only:
                - << pipeline.git.branch >>

  